"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_simple_ast_1 = require("ts-simple-ast");
const fs = require("fs");
const Minimatch = require('minimatch').Minimatch;
const glob = require('glob-all');
/**
 * Creates a ts-simple-ast Project by including the source files under the given
 * `directory`.
 *
 * @param directory The absolute path to the directory of .js files to
 *   include.
 * @param options
 * @param options.indentationText The text used to indent new class property
 *   declarations.
 * @param options.excludePatterns Glob patterns to exclude files.
 */
function createTsAstProject(directory, options = {}) {
    const tsAstProject = new ts_simple_ast_1.default({
        manipulationSettings: {
            indentationText: options.indentationText || ts_simple_ast_1.IndentationText.Tab
        }
    });
    // Get all files, and then filter. Was using glob-all and passing all of the
    // globs to the utility, but it takes way too long on large projects because
    // it seems to read the file system multiple times - once for each pattern.
    let files = glob.sync(`${directory}/**/*.+(js|ts)`, {
        follow: true // follow symlinks
    });
    // First, filter out any path which includes node_modules. We don't want to
    // attempt to parse those as they may be ES5, and we also don't accidentally
    // want to write out into the node_modules folder
    const nodeModulesRegex = /[\\\/]node_modules[\\\/]/;
    files = files.filter((file) => !nodeModulesRegex.test(file));
    let includeMinimatches = createIncludeMinimatches(directory, options.includePatterns);
    let excludeMinimatches = createExcludeMinimatches(directory, options.excludePatterns);
    let includedFiles = files
        .filter((filePath) => {
        return includeMinimatches.some(minimatch => minimatch.match(filePath));
    })
        .filter((filePath) => {
        return !excludeMinimatches.some(minimatch => minimatch.match(filePath));
    })
        .filter((filePath) => fs.statSync(filePath).isFile()); // don't take directories
    includedFiles.forEach((filePath) => {
        tsAstProject.addExistingSourceFile(filePath);
    });
    return tsAstProject;
}
exports.createTsAstProject = createTsAstProject;
function createIncludeMinimatches(directory, includePatterns) {
    return (includePatterns || ['**/*.+(js|ts)'])
        .map(pattern => `${directory}/${pattern}`)
        .map(pattern => new Minimatch(pattern));
}
function createExcludeMinimatches(directory, excludePatterns) {
    return (excludePatterns || [])
        .map(pattern => `${directory}/${pattern}`)
        .map(pattern => new Minimatch(pattern));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRzLWFzdC1wcm9qZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZS10cy1hc3QtcHJvamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUF5RDtBQUN6RCx5QkFBeUI7QUFDekIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFFLFdBQVcsQ0FBRSxDQUFDLFNBQVMsQ0FBQztBQUNuRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUUsVUFBVSxDQUFFLENBQUM7QUFFbkM7Ozs7Ozs7Ozs7R0FVRztBQUNILDRCQUFvQyxTQUFpQixFQUFFLFVBSW5ELEVBQUU7SUFDTCxNQUFNLFlBQVksR0FBRyxJQUFJLHVCQUFPLENBQUU7UUFDakMsb0JBQW9CLEVBQUU7WUFDckIsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlLElBQUksK0JBQWUsQ0FBQyxHQUFHO1NBQy9EO0tBQ0QsQ0FBRSxDQUFDO0lBRUosNEVBQTRFO0lBQzVFLDRFQUE0RTtJQUM1RSwyRUFBMkU7SUFDM0UsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxHQUFHLFNBQVMsZ0JBQWdCLEVBQUU7UUFDcEQsTUFBTSxFQUFFLElBQUksQ0FBRyxrQkFBa0I7S0FDakMsQ0FBRSxDQUFDO0lBRUosMkVBQTJFO0lBQzNFLDRFQUE0RTtJQUM1RSxpREFBaUQ7SUFDakQsTUFBTSxnQkFBZ0IsR0FBRywwQkFBMEIsQ0FBQztJQUNwRCxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBRSxDQUFFLElBQVksRUFBRyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQztJQUUzRSxJQUFJLGtCQUFrQixHQUFHLHdCQUF3QixDQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFFLENBQUM7SUFDeEYsSUFBSSxrQkFBa0IsR0FBRyx3QkFBd0IsQ0FBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBRSxDQUFDO0lBRXhGLElBQUksYUFBYSxHQUFHLEtBQUs7U0FDdkIsTUFBTSxDQUFFLENBQUUsUUFBZ0IsRUFBRyxFQUFFO1FBQy9CLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBRSxRQUFRLENBQUUsQ0FBRSxDQUFDO0lBQzVFLENBQUMsQ0FBRTtTQUNGLE1BQU0sQ0FBRSxDQUFFLFFBQWdCLEVBQUcsRUFBRTtRQUMvQixPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBRSxRQUFRLENBQUUsQ0FBRSxDQUFDO0lBQzdFLENBQUMsQ0FBRTtTQUNGLE1BQU0sQ0FBRSxDQUFFLFFBQWdCLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxFQUFFLENBQUUsQ0FBQyxDQUFFLHlCQUF5QjtJQUVoRyxhQUFhLENBQUMsT0FBTyxDQUFFLENBQUUsUUFBZ0IsRUFBRyxFQUFFO1FBQzdDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBRSxRQUFRLENBQUUsQ0FBQTtJQUMvQyxDQUFDLENBQUUsQ0FBQztJQUVKLE9BQU8sWUFBWSxDQUFDO0FBQ3JCLENBQUM7QUF6Q0QsZ0RBeUNDO0FBR0Qsa0NBQ0MsU0FBaUIsRUFDakIsZUFBcUM7SUFFckMsT0FBTyxDQUFFLGVBQWUsSUFBSSxDQUFFLGVBQWUsQ0FBRSxDQUFFO1NBQy9DLEdBQUcsQ0FBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxJQUFJLE9BQU8sRUFBRSxDQUFFO1NBQzNDLEdBQUcsQ0FBRSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksU0FBUyxDQUFFLE9BQU8sQ0FBRSxDQUFFLENBQUM7QUFDOUMsQ0FBQztBQUdELGtDQUNDLFNBQWlCLEVBQ2pCLGVBQXFDO0lBRXJDLE9BQU8sQ0FBRSxlQUFlLElBQUksRUFBRSxDQUFFO1NBQzlCLEdBQUcsQ0FBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxJQUFJLE9BQU8sRUFBRSxDQUFFO1NBQzNDLEdBQUcsQ0FBRSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksU0FBUyxDQUFFLE9BQU8sQ0FBRSxDQUFFLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9qZWN0LCB7IEluZGVudGF0aW9uVGV4dCB9IGZyb20gXCJ0cy1zaW1wbGUtYXN0XCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmNvbnN0IE1pbmltYXRjaCA9IHJlcXVpcmUoICdtaW5pbWF0Y2gnICkuTWluaW1hdGNoO1xuY29uc3QgZ2xvYiA9IHJlcXVpcmUoICdnbG9iLWFsbCcgKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdHMtc2ltcGxlLWFzdCBQcm9qZWN0IGJ5IGluY2x1ZGluZyB0aGUgc291cmNlIGZpbGVzIHVuZGVyIHRoZSBnaXZlblxuICogYGRpcmVjdG9yeWAuXG4gKlxuICogQHBhcmFtIGRpcmVjdG9yeSBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgZGlyZWN0b3J5IG9mIC5qcyBmaWxlcyB0b1xuICogICBpbmNsdWRlLlxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBvcHRpb25zLmluZGVudGF0aW9uVGV4dCBUaGUgdGV4dCB1c2VkIHRvIGluZGVudCBuZXcgY2xhc3MgcHJvcGVydHlcbiAqICAgZGVjbGFyYXRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMuZXhjbHVkZVBhdHRlcm5zIEdsb2IgcGF0dGVybnMgdG8gZXhjbHVkZSBmaWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRzQXN0UHJvamVjdCggZGlyZWN0b3J5OiBzdHJpbmcsIG9wdGlvbnM6IHtcblx0aW5kZW50YXRpb25UZXh0PzogSW5kZW50YXRpb25UZXh0LFxuXHRpbmNsdWRlUGF0dGVybnM/OiBzdHJpbmdbXSxcblx0ZXhjbHVkZVBhdHRlcm5zPzogc3RyaW5nW11cbn0gPSB7fSApIHtcblx0Y29uc3QgdHNBc3RQcm9qZWN0ID0gbmV3IFByb2plY3QoIHtcblx0XHRtYW5pcHVsYXRpb25TZXR0aW5nczoge1xuXHRcdFx0aW5kZW50YXRpb25UZXh0OiBvcHRpb25zLmluZGVudGF0aW9uVGV4dCB8fCBJbmRlbnRhdGlvblRleHQuVGFiXG5cdFx0fVxuXHR9ICk7XG5cblx0Ly8gR2V0IGFsbCBmaWxlcywgYW5kIHRoZW4gZmlsdGVyLiBXYXMgdXNpbmcgZ2xvYi1hbGwgYW5kIHBhc3NpbmcgYWxsIG9mIHRoZVxuXHQvLyBnbG9icyB0byB0aGUgdXRpbGl0eSwgYnV0IGl0IHRha2VzIHdheSB0b28gbG9uZyBvbiBsYXJnZSBwcm9qZWN0cyBiZWNhdXNlXG5cdC8vIGl0IHNlZW1zIHRvIHJlYWQgdGhlIGZpbGUgc3lzdGVtIG11bHRpcGxlIHRpbWVzIC0gb25jZSBmb3IgZWFjaCBwYXR0ZXJuLlxuXHRsZXQgZmlsZXMgPSBnbG9iLnN5bmMoIGAke2RpcmVjdG9yeX0vKiovKi4rKGpzfHRzKWAsIHtcblx0XHRmb2xsb3c6IHRydWUgICAvLyBmb2xsb3cgc3ltbGlua3Ncblx0fSApO1xuXG5cdC8vIEZpcnN0LCBmaWx0ZXIgb3V0IGFueSBwYXRoIHdoaWNoIGluY2x1ZGVzIG5vZGVfbW9kdWxlcy4gV2UgZG9uJ3Qgd2FudCB0b1xuXHQvLyBhdHRlbXB0IHRvIHBhcnNlIHRob3NlIGFzIHRoZXkgbWF5IGJlIEVTNSwgYW5kIHdlIGFsc28gZG9uJ3QgYWNjaWRlbnRhbGx5XG5cdC8vIHdhbnQgdG8gd3JpdGUgb3V0IGludG8gdGhlIG5vZGVfbW9kdWxlcyBmb2xkZXJcblx0Y29uc3Qgbm9kZU1vZHVsZXNSZWdleCA9IC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL10vO1xuXHRmaWxlcyA9IGZpbGVzLmZpbHRlciggKCBmaWxlOiBzdHJpbmcgKSA9PiAhbm9kZU1vZHVsZXNSZWdleC50ZXN0KCBmaWxlICkgKTtcblxuXHRsZXQgaW5jbHVkZU1pbmltYXRjaGVzID0gY3JlYXRlSW5jbHVkZU1pbmltYXRjaGVzKCBkaXJlY3RvcnksIG9wdGlvbnMuaW5jbHVkZVBhdHRlcm5zICk7XG5cdGxldCBleGNsdWRlTWluaW1hdGNoZXMgPSBjcmVhdGVFeGNsdWRlTWluaW1hdGNoZXMoIGRpcmVjdG9yeSwgb3B0aW9ucy5leGNsdWRlUGF0dGVybnMgKTtcblxuXHRsZXQgaW5jbHVkZWRGaWxlcyA9IGZpbGVzXG5cdFx0LmZpbHRlciggKCBmaWxlUGF0aDogc3RyaW5nICkgPT4ge1xuXHRcdFx0cmV0dXJuIGluY2x1ZGVNaW5pbWF0Y2hlcy5zb21lKCBtaW5pbWF0Y2ggPT4gbWluaW1hdGNoLm1hdGNoKCBmaWxlUGF0aCApICk7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggKCBmaWxlUGF0aDogc3RyaW5nICkgPT4ge1xuXHRcdFx0cmV0dXJuICFleGNsdWRlTWluaW1hdGNoZXMuc29tZSggbWluaW1hdGNoID0+IG1pbmltYXRjaC5tYXRjaCggZmlsZVBhdGggKSApO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoICggZmlsZVBhdGg6IHN0cmluZyApID0+IGZzLnN0YXRTeW5jKCBmaWxlUGF0aCApLmlzRmlsZSgpICk7ICAvLyBkb24ndCB0YWtlIGRpcmVjdG9yaWVzXG5cblx0aW5jbHVkZWRGaWxlcy5mb3JFYWNoKCAoIGZpbGVQYXRoOiBzdHJpbmcgKSA9PiB7XG5cdFx0dHNBc3RQcm9qZWN0LmFkZEV4aXN0aW5nU291cmNlRmlsZSggZmlsZVBhdGggKVxuXHR9ICk7XG5cblx0cmV0dXJuIHRzQXN0UHJvamVjdDtcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVJbmNsdWRlTWluaW1hdGNoZXMoXG5cdGRpcmVjdG9yeTogc3RyaW5nLFxuXHRpbmNsdWRlUGF0dGVybnM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkXG4pIHtcblx0cmV0dXJuICggaW5jbHVkZVBhdHRlcm5zIHx8IFsgJyoqLyouKyhqc3x0cyknIF0gKVxuXHRcdC5tYXAoIHBhdHRlcm4gPT4gYCR7ZGlyZWN0b3J5fS8ke3BhdHRlcm59YCApXG5cdFx0Lm1hcCggcGF0dGVybiA9PiBuZXcgTWluaW1hdGNoKCBwYXR0ZXJuICkgKTtcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVFeGNsdWRlTWluaW1hdGNoZXMoXG5cdGRpcmVjdG9yeTogc3RyaW5nLFxuXHRleGNsdWRlUGF0dGVybnM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkXG4pIHtcblx0cmV0dXJuICggZXhjbHVkZVBhdHRlcm5zIHx8IFtdIClcblx0XHQubWFwKCBwYXR0ZXJuID0+IGAke2RpcmVjdG9yeX0vJHtwYXR0ZXJufWAgKVxuXHRcdC5tYXAoIHBhdHRlcm4gPT4gbmV3IE1pbmltYXRjaCggcGF0dGVybiApICk7XG59XG5cbiJdfQ==