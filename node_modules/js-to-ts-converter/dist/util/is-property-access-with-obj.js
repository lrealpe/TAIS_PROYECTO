"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_simple_ast_1 = require("ts-simple-ast");
/**
 * Determines if the given `node` is a PropertyAccessExpression or
 * ElementAccessExpression whose object is `obj`.
 *
 * Example, in the following expression:
 *
 *     obj.a
 *
 * This function will return true if called as:
 *
 *     isPropertyOrElemementAccessWithObj( expr, 'obj' );
 */
function isPropertyAccessWithObj(node, objIdentifier) {
    if (!ts_simple_ast_1.TypeGuards.isPropertyAccessExpression(node)) {
        return false;
    }
    const expr = node.getExpression();
    if (objIdentifier === 'this') {
        return ts_simple_ast_1.TypeGuards.isThisExpression(expr);
    }
    else if (ts_simple_ast_1.TypeGuards.isIdentifier(expr)) {
        const identifier = expr;
        return identifier.getText() === objIdentifier;
    }
    else {
        return false;
    }
}
exports.isPropertyAccessWithObj = isPropertyAccessWithObj;
/**
 * Function intended to be used with Array.prototype.filter() to return any
 * PropertyAccessExpression that uses the object `obj`.
 *
 * For example, in this source code:
 *
 *     const obj = { a: 1, b: 2 };
 *     obj.a = 3;
 *
 *     const obj2 = { a: 3, b: 4 };
 *     obj2.b = 5;
 *
 * We can use the following to find the 'obj2' property access:
 *
 *     const propAccesses = sourceFile
 *         .getDescendantsOfKind( SyntaxKind.PropertyAccessExpression );
 *
 *     const obj2PropAccesses = propAccesses
 *         .filter( propAccessWithObjFilter( 'obj2' ) );
 */
function propertyAccessWithObjFilter(objIdentifier) {
    return (node) => {
        return isPropertyAccessWithObj(node, objIdentifier);
    };
}
exports.propertyAccessWithObjFilter = propertyAccessWithObjFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtcHJvcGVydHktYWNjZXNzLXdpdGgtb2JqLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvaXMtcHJvcGVydHktYWNjZXNzLXdpdGgtb2JqLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQXVGO0FBRXZGOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsaUNBQ0MsSUFBVSxFQUNWLGFBQXFCO0lBRXJCLElBQUksQ0FBQywwQkFBVSxDQUFDLDBCQUEwQixDQUFFLElBQUksQ0FBRSxFQUFHO1FBQ3BELE9BQU8sS0FBSyxDQUFDO0tBQ2I7SUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFbEMsSUFBSSxhQUFhLEtBQUssTUFBTSxFQUFHO1FBQzlCLE9BQU8sMEJBQVUsQ0FBQyxnQkFBZ0IsQ0FBRSxJQUFJLENBQUUsQ0FBQztLQUUzQztTQUFNLElBQUksMEJBQVUsQ0FBQyxZQUFZLENBQUUsSUFBSSxDQUFFLEVBQUc7UUFDNUMsTUFBTSxVQUFVLEdBQUcsSUFBa0IsQ0FBQztRQUV0QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxhQUFhLENBQUM7S0FFOUM7U0FBTTtRQUNOLE9BQU8sS0FBSyxDQUFDO0tBQ2I7QUFDRixDQUFDO0FBckJELDBEQXFCQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gscUNBQTZDLGFBQXFCO0lBQ2pFLE9BQU8sQ0FBRSxJQUFVLEVBQXFDLEVBQUU7UUFDekQsT0FBTyx1QkFBdUIsQ0FBRSxJQUFJLEVBQUUsYUFBYSxDQUFFLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0FBQ0gsQ0FBQztBQUpELGtFQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWRlbnRpZmllciwgTm9kZSwgUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uLCBUeXBlR3VhcmRzIH0gZnJvbSBcInRzLXNpbXBsZS1hc3RcIjtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBgbm9kZWAgaXMgYSBQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gb3JcbiAqIEVsZW1lbnRBY2Nlc3NFeHByZXNzaW9uIHdob3NlIG9iamVjdCBpcyBgb2JqYC5cbiAqXG4gKiBFeGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nIGV4cHJlc3Npb246XG4gKlxuICogICAgIG9iai5hXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiB0cnVlIGlmIGNhbGxlZCBhczpcbiAqXG4gKiAgICAgaXNQcm9wZXJ0eU9yRWxlbWVtZW50QWNjZXNzV2l0aE9iaiggZXhwciwgJ29iaicgKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcGVydHlBY2Nlc3NXaXRoT2JqKFxuXHRub2RlOiBOb2RlLFxuXHRvYmpJZGVudGlmaWVyOiBzdHJpbmdcbik6IG5vZGUgaXMgUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uIHtcblx0aWYoICFUeXBlR3VhcmRzLmlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKCBub2RlICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y29uc3QgZXhwciA9IG5vZGUuZ2V0RXhwcmVzc2lvbigpO1xuXG5cdGlmKCBvYmpJZGVudGlmaWVyID09PSAndGhpcycgKSB7XG5cdFx0cmV0dXJuIFR5cGVHdWFyZHMuaXNUaGlzRXhwcmVzc2lvbiggZXhwciApO1xuXG5cdH0gZWxzZSBpZiggVHlwZUd1YXJkcy5pc0lkZW50aWZpZXIoIGV4cHIgKSApIHtcblx0XHRjb25zdCBpZGVudGlmaWVyID0gZXhwciBhcyBJZGVudGlmaWVyO1xuXG5cdFx0cmV0dXJuIGlkZW50aWZpZXIuZ2V0VGV4dCgpID09PSBvYmpJZGVudGlmaWVyO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbi8qKlxuICogRnVuY3Rpb24gaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoKSB0byByZXR1cm4gYW55XG4gKiBQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gdGhhdCB1c2VzIHRoZSBvYmplY3QgYG9iamAuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluIHRoaXMgc291cmNlIGNvZGU6XG4gKlxuICogICAgIGNvbnN0IG9iaiA9IHsgYTogMSwgYjogMiB9O1xuICogICAgIG9iai5hID0gMztcbiAqXG4gKiAgICAgY29uc3Qgb2JqMiA9IHsgYTogMywgYjogNCB9O1xuICogICAgIG9iajIuYiA9IDU7XG4gKlxuICogV2UgY2FuIHVzZSB0aGUgZm9sbG93aW5nIHRvIGZpbmQgdGhlICdvYmoyJyBwcm9wZXJ0eSBhY2Nlc3M6XG4gKlxuICogICAgIGNvbnN0IHByb3BBY2Nlc3NlcyA9IHNvdXJjZUZpbGVcbiAqICAgICAgICAgLmdldERlc2NlbmRhbnRzT2ZLaW5kKCBTeW50YXhLaW5kLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiApO1xuICpcbiAqICAgICBjb25zdCBvYmoyUHJvcEFjY2Vzc2VzID0gcHJvcEFjY2Vzc2VzXG4gKiAgICAgICAgIC5maWx0ZXIoIHByb3BBY2Nlc3NXaXRoT2JqRmlsdGVyKCAnb2JqMicgKSApO1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlBY2Nlc3NXaXRoT2JqRmlsdGVyKCBvYmpJZGVudGlmaWVyOiBzdHJpbmcgKSB7XG5cdHJldHVybiAoIG5vZGU6IE5vZGUgKTogbm9kZSBpcyBQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gPT4ge1xuXHRcdHJldHVybiBpc1Byb3BlcnR5QWNjZXNzV2l0aE9iaiggbm9kZSwgb2JqSWRlbnRpZmllciApO1xuXHR9O1xufSJdfQ==