"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const create_ts_ast_project_1 = require("./create-ts-ast-project");
const convert_1 = require("./converter/convert");
const logger_1 = require("./logger/logger");
/**
 * Asynchronously converts the JavaScript files under the given `sourceFilesPath`
 * to TypeScript files.
 *
 * @param sourceFilesPath The path to the source files to convert
 * @param [options]
 * @param [options.indentationText] The text used to indent new class property
 *   declarations.
 * @param [options.logLevel] The level of logging to show on the console.
 *   One of: 'debug', 'verbose', 'info', 'warn', 'error'
 * @param [options.includePatterns] Glob patterns to include files.
 * @param [options.excludePatterns] Glob patterns to exclude files.
 */
async function convertJsToTs(sourceFilesPath, options = {}) {
    const convertedTsAstProject = doConvert(sourceFilesPath, options);
    // Save output files
    return convertedTsAstProject.save();
}
exports.convertJsToTs = convertJsToTs;
/**
 * Synchronously converts the JavaScript files under the given `sourceFilesPath`
 * to TypeScript files.
 *
 * @param sourceFilesPath The path to the source files to convert
 * @param [options]
 * @param [options.indentationText] The text used to indent new class property
 *   declarations.
 * @param [options.logLevel] The level of logging to show on the console.
 *   One of: 'debug', 'verbose', 'info', 'warn', 'error'
 * @param [options.includePatterns] Glob patterns to include files.
 * @param [options.excludePatterns] Glob patterns to exclude files.
 */
function convertJsToTsSync(sourceFilesPath, options = {}) {
    const convertedTsAstProject = doConvert(sourceFilesPath, options);
    // Save output files
    convertedTsAstProject.saveSync();
}
exports.convertJsToTsSync = convertJsToTsSync;
/**
 * Performs the actual conversion given a `sourceFilesPath`, and returning a
 * `ts-simple-ast` Project with the converted source files.
 *
 * @param sourceFilesPath The path to the source files to convert
 * @param [options]
 * @param [options.indentationText] The text used to indent new class property
 *   declarations.
 * @param [options.logLevel] The level of logging to show on the console.
 *   One of: 'debug', 'verbose', 'info', 'warn', 'error'
 * @param [options.includePatterns] Glob patterns to include files.
 * @param [options.excludePatterns] Glob patterns to exclude files.
 */
function doConvert(sourceFilesPath, options = {}) {
    logger_1.default.setLogLevel(options.logLevel || 'verbose');
    const absolutePath = path.resolve(sourceFilesPath);
    const tsAstProject = create_ts_ast_project_1.createTsAstProject(absolutePath, options);
    return convert_1.convert(tsAstProject);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMtdG8tdHMtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2pzLXRvLXRzLWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixtRUFBNkQ7QUFDN0QsaURBQThDO0FBRzlDLDRDQUFxQztBQVNyQzs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSSxLQUFLLHdCQUNYLGVBQXVCLEVBQ3ZCLFVBQWtDLEVBQUU7SUFFcEMsTUFBTSxxQkFBcUIsR0FBRyxTQUFTLENBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBRXBFLG9CQUFvQjtJQUNwQixPQUFPLHFCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3JDLENBQUM7QUFSRCxzQ0FRQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILDJCQUNDLGVBQXVCLEVBQ3ZCLFVBQWtDLEVBQUU7SUFFcEMsTUFBTSxxQkFBcUIsR0FBRyxTQUFTLENBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBRXBFLG9CQUFvQjtJQUNwQixxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNsQyxDQUFDO0FBUkQsOENBUUM7QUFHRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxtQkFDQyxlQUF1QixFQUN2QixVQUFrQyxFQUFFO0lBRXBDLGdCQUFNLENBQUMsV0FBVyxDQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFFLENBQUM7SUFFcEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBRSxlQUFlLENBQUUsQ0FBQztJQUVyRCxNQUFNLFlBQVksR0FBRywwQ0FBa0IsQ0FBRSxZQUFZLEVBQUUsT0FBTyxDQUFFLENBQUM7SUFDakUsT0FBTyxpQkFBTyxDQUFFLFlBQVksQ0FBRSxDQUFDO0FBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgY3JlYXRlVHNBc3RQcm9qZWN0IH0gZnJvbSBcIi4vY3JlYXRlLXRzLWFzdC1wcm9qZWN0XCI7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSBcIi4vY29udmVydGVyL2NvbnZlcnRcIjtcbmltcG9ydCBQcm9qZWN0LCB7IEluZGVudGF0aW9uVGV4dCB9IGZyb20gXCJ0cy1zaW1wbGUtYXN0XCI7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuL2xvZ2dlclwiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIvbG9nZ2VyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNUb1RzQ29udmVydGVyT3B0aW9ucyB7XG5cdGluZGVudGF0aW9uVGV4dD86IEluZGVudGF0aW9uVGV4dCxcblx0bG9nTGV2ZWw/OiBMb2dMZXZlbCxcblx0aW5jbHVkZVBhdHRlcm5zPzogc3RyaW5nW10sXG5cdGV4Y2x1ZGVQYXR0ZXJucz86IHN0cmluZ1tdXG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgY29udmVydHMgdGhlIEphdmFTY3JpcHQgZmlsZXMgdW5kZXIgdGhlIGdpdmVuIGBzb3VyY2VGaWxlc1BhdGhgXG4gKiB0byBUeXBlU2NyaXB0IGZpbGVzLlxuICpcbiAqIEBwYXJhbSBzb3VyY2VGaWxlc1BhdGggVGhlIHBhdGggdG8gdGhlIHNvdXJjZSBmaWxlcyB0byBjb252ZXJ0XG4gKiBAcGFyYW0gW29wdGlvbnNdXG4gKiBAcGFyYW0gW29wdGlvbnMuaW5kZW50YXRpb25UZXh0XSBUaGUgdGV4dCB1c2VkIHRvIGluZGVudCBuZXcgY2xhc3MgcHJvcGVydHlcbiAqICAgZGVjbGFyYXRpb25zLlxuICogQHBhcmFtIFtvcHRpb25zLmxvZ0xldmVsXSBUaGUgbGV2ZWwgb2YgbG9nZ2luZyB0byBzaG93IG9uIHRoZSBjb25zb2xlLlxuICogICBPbmUgb2Y6ICdkZWJ1ZycsICd2ZXJib3NlJywgJ2luZm8nLCAnd2FybicsICdlcnJvcidcbiAqIEBwYXJhbSBbb3B0aW9ucy5pbmNsdWRlUGF0dGVybnNdIEdsb2IgcGF0dGVybnMgdG8gaW5jbHVkZSBmaWxlcy5cbiAqIEBwYXJhbSBbb3B0aW9ucy5leGNsdWRlUGF0dGVybnNdIEdsb2IgcGF0dGVybnMgdG8gZXhjbHVkZSBmaWxlcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRKc1RvVHMoXG5cdHNvdXJjZUZpbGVzUGF0aDogc3RyaW5nLFxuXHRvcHRpb25zOiBKc1RvVHNDb252ZXJ0ZXJPcHRpb25zID0ge31cbik6IFByb21pc2U8dm9pZD4ge1xuXHRjb25zdCBjb252ZXJ0ZWRUc0FzdFByb2plY3QgPSBkb0NvbnZlcnQoIHNvdXJjZUZpbGVzUGF0aCwgb3B0aW9ucyApO1xuXG5cdC8vIFNhdmUgb3V0cHV0IGZpbGVzXG5cdHJldHVybiBjb252ZXJ0ZWRUc0FzdFByb2plY3Quc2F2ZSgpO1xufVxuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgY29udmVydHMgdGhlIEphdmFTY3JpcHQgZmlsZXMgdW5kZXIgdGhlIGdpdmVuIGBzb3VyY2VGaWxlc1BhdGhgXG4gKiB0byBUeXBlU2NyaXB0IGZpbGVzLlxuICpcbiAqIEBwYXJhbSBzb3VyY2VGaWxlc1BhdGggVGhlIHBhdGggdG8gdGhlIHNvdXJjZSBmaWxlcyB0byBjb252ZXJ0XG4gKiBAcGFyYW0gW29wdGlvbnNdXG4gKiBAcGFyYW0gW29wdGlvbnMuaW5kZW50YXRpb25UZXh0XSBUaGUgdGV4dCB1c2VkIHRvIGluZGVudCBuZXcgY2xhc3MgcHJvcGVydHlcbiAqICAgZGVjbGFyYXRpb25zLlxuICogQHBhcmFtIFtvcHRpb25zLmxvZ0xldmVsXSBUaGUgbGV2ZWwgb2YgbG9nZ2luZyB0byBzaG93IG9uIHRoZSBjb25zb2xlLlxuICogICBPbmUgb2Y6ICdkZWJ1ZycsICd2ZXJib3NlJywgJ2luZm8nLCAnd2FybicsICdlcnJvcidcbiAqIEBwYXJhbSBbb3B0aW9ucy5pbmNsdWRlUGF0dGVybnNdIEdsb2IgcGF0dGVybnMgdG8gaW5jbHVkZSBmaWxlcy5cbiAqIEBwYXJhbSBbb3B0aW9ucy5leGNsdWRlUGF0dGVybnNdIEdsb2IgcGF0dGVybnMgdG8gZXhjbHVkZSBmaWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRKc1RvVHNTeW5jKFxuXHRzb3VyY2VGaWxlc1BhdGg6IHN0cmluZyxcblx0b3B0aW9uczogSnNUb1RzQ29udmVydGVyT3B0aW9ucyA9IHt9XG4pIHtcblx0Y29uc3QgY29udmVydGVkVHNBc3RQcm9qZWN0ID0gZG9Db252ZXJ0KCBzb3VyY2VGaWxlc1BhdGgsIG9wdGlvbnMgKTtcblxuXHQvLyBTYXZlIG91dHB1dCBmaWxlc1xuXHRjb252ZXJ0ZWRUc0FzdFByb2plY3Quc2F2ZVN5bmMoKTtcbn1cblxuXG4vKipcbiAqIFBlcmZvcm1zIHRoZSBhY3R1YWwgY29udmVyc2lvbiBnaXZlbiBhIGBzb3VyY2VGaWxlc1BhdGhgLCBhbmQgcmV0dXJuaW5nIGFcbiAqIGB0cy1zaW1wbGUtYXN0YCBQcm9qZWN0IHdpdGggdGhlIGNvbnZlcnRlZCBzb3VyY2UgZmlsZXMuXG4gKlxuICogQHBhcmFtIHNvdXJjZUZpbGVzUGF0aCBUaGUgcGF0aCB0byB0aGUgc291cmNlIGZpbGVzIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSBbb3B0aW9uc11cbiAqIEBwYXJhbSBbb3B0aW9ucy5pbmRlbnRhdGlvblRleHRdIFRoZSB0ZXh0IHVzZWQgdG8gaW5kZW50IG5ldyBjbGFzcyBwcm9wZXJ0eVxuICogICBkZWNsYXJhdGlvbnMuXG4gKiBAcGFyYW0gW29wdGlvbnMubG9nTGV2ZWxdIFRoZSBsZXZlbCBvZiBsb2dnaW5nIHRvIHNob3cgb24gdGhlIGNvbnNvbGUuXG4gKiAgIE9uZSBvZjogJ2RlYnVnJywgJ3ZlcmJvc2UnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ1xuICogQHBhcmFtIFtvcHRpb25zLmluY2x1ZGVQYXR0ZXJuc10gR2xvYiBwYXR0ZXJucyB0byBpbmNsdWRlIGZpbGVzLlxuICogQHBhcmFtIFtvcHRpb25zLmV4Y2x1ZGVQYXR0ZXJuc10gR2xvYiBwYXR0ZXJucyB0byBleGNsdWRlIGZpbGVzLlxuICovXG5mdW5jdGlvbiBkb0NvbnZlcnQoXG5cdHNvdXJjZUZpbGVzUGF0aDogc3RyaW5nLFxuXHRvcHRpb25zOiBKc1RvVHNDb252ZXJ0ZXJPcHRpb25zID0ge31cbik6IFByb2plY3Qge1xuXHRsb2dnZXIuc2V0TG9nTGV2ZWwoIG9wdGlvbnMubG9nTGV2ZWwgfHwgJ3ZlcmJvc2UnICk7XG5cblx0Y29uc3QgYWJzb2x1dGVQYXRoID0gcGF0aC5yZXNvbHZlKCBzb3VyY2VGaWxlc1BhdGggKTtcblxuXHRjb25zdCB0c0FzdFByb2plY3QgPSBjcmVhdGVUc0FzdFByb2plY3QoIGFic29sdXRlUGF0aCwgb3B0aW9ucyApO1xuXHRyZXR1cm4gY29udmVydCggdHNBc3RQcm9qZWN0ICk7XG59Il19