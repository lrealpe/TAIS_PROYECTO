"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const set_utils_1 = require("../../util/set-utils");
/**
 * Represents a JavaScript class found in a source file.
 */
class JsClass {
    constructor(cfg) {
        this.name = cfg.name;
        this.path = cfg.path;
        this.superclassName = cfg.superclassName;
        this.superclassPath = cfg.superclassPath;
        this.methods = cfg.methods || new Set();
        this.properties = cfg.properties || new Set();
        this.members = set_utils_1.union(this.methods, this.properties);
    }
    /**
     * String identifier for the JsClass which is a combination of its file path
     * and class name. Used to store JsClass nodes on a graphlib Graph.
     */
    get id() {
        return `${this.path}_${this.name}`;
    }
    /**
     * Retrieves the ID of the superclass JsClass instance, if the JsClass has
     * one. If not, returns undefined.
     *
     * Also returns `undefined` if the class is found to be in the node_modules
     * folder, as we don't want to attempt to parse ES5 modules.
     */
    get superclassId() {
        if (this.isSuperclassInNodeModules()) {
            // If the superclass is in the node_modules folder, we'll
            // essentially treat this JsClass as if it didn't have a superclass.
            // See `isSuperclassInNodeModules()` jsdoc for details.
            return undefined;
        }
        else {
            return this.superclassName && `${this.superclassPath}_${this.superclassName}`;
        }
    }
    /**
     * Determines if the JsClass's superclass was found in the node_modules
     * directory (i.e. it extends from another package).
     *
     * If so, we're not going to try to understand a possibly ES5 module for
     * its properties, so we'll just stop processing at that point.
     */
    isSuperclassInNodeModules() {
        return this.superclassPath === undefined;
    }
}
exports.JsClass = JsClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMtY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udmVydGVyL2FkZC1jbGFzcy1wcm9wZXJ0eS1kZWNsYXJhdGlvbnMvanMtY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBNkM7QUFFN0M7O0dBRUc7QUFDSDtJQW1EQyxZQUFhLEdBT1o7UUFDQSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQztRQUN6QyxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksR0FBRyxFQUFVLENBQUM7UUFDaEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxJQUFJLElBQUksR0FBRyxFQUFVLENBQUM7UUFFdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxpQkFBSyxDQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFXLEVBQUU7UUFDWixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQVcsWUFBWTtRQUN0QixJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxFQUFHO1lBQ3RDLHlEQUF5RDtZQUN6RCxvRUFBb0U7WUFDcEUsdURBQXVEO1lBQ3ZELE9BQU8sU0FBUyxDQUFDO1NBRWpCO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUM5RTtJQUNGLENBQUM7SUFHRDs7Ozs7O09BTUc7SUFDSSx5QkFBeUI7UUFDL0IsT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0NBRUQ7QUE1R0QsMEJBNEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5pb24gfSBmcm9tIFwiLi4vLi4vdXRpbC9zZXQtdXRpbHNcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgSmF2YVNjcmlwdCBjbGFzcyBmb3VuZCBpbiBhIHNvdXJjZSBmaWxlLlxuICovXG5leHBvcnQgY2xhc3MgSnNDbGFzcyB7XG5cdC8qKlxuXHQgKiBUaGUgbmFtZSBvZiB0aGUgY2xhc3MuXG5cdCAqXG5cdCAqIFdpbGwgYmUgdW5kZWZpbmVkIGZvciBhIGRlZmF1bHQgZXhwb3J0IGNsYXNzLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogVGhlIGFic29sdXRlIHBhdGggb2YgdGhlIGZpbGUgdGhhdCB0aGUgY2xhc3Mgd2FzIGZvdW5kIGluLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIG5hbWUgb2YgdGhpcyBjbGFzcydzIHN1cGVyY2xhc3MuIFdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgdGhlIGNsYXNzXG5cdCAqIGRvZXMgbm90IGhhdmUgYSBzdXBlcmNsYXNzLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IHN1cGVyY2xhc3NOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cblx0LyoqXG5cdCAqIFRoZSBwYXRoIHRvIHRoZSBmaWxlIHdoaWNoIGhvbGRzIHRoaXMgY2xhc3MncyBzdXBlcmNsYXNzLiBJZiB0aGUgc2FtZVxuXHQgKiBmaWxlIHRoYXQgaG9sZHMgdGhpcyBjbGFzcyBhbHNvIGhvbGRzIGl0cyBzdXBlcmNsYXNzLCB0aGlzIHdpbGwgYmUgdGhlXG5cdCAqIHNhbWUgdmFsdWUgYXMgdGhlIHtAbGluayAjcGF0aH0uXG5cdCAqXG5cdCAqIFdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgdGhlIHN1cGVyY2xhc3Mgd2FzIGZvdW5kIGluIHRoZSBub2RlX21vZHVsZXNcblx0ICogZm9sZGVyLiBXZSBkb24ndCB0cnkgdG8gcmVzb2x2ZSB0aGUgcGF0aCBvZiBhIG1vZHVsZSB0aGF0IGV4aXN0cyBpbiB0aGVcblx0ICogbm9kZV9tb2R1bGVzIGZvbGRlciBhcyB0aGV5J3JlIG5vdCByZWxldmFudCB0byB0aGlzIGNvbnZlcnNpb24gdXRpbGl0eSxcblx0ICogYW5kIHdlIHdhbnQgdG8gYWxsb3cgY29udmVyc2lvbnMgb2YgY29kZWJhc2VzIHRoYXQgZG9uJ3QgaGF2ZVxuXHQgKiBub2RlX21vZHVsZXMgaW5zdGFsbGVkICh3aGljaCBjYW4gcmVhbGx5IGltcHJvdmUgcGVyZm9ybWFuY2UgYXNcblx0ICogdHMtc2ltcGxlLWFzdCBkb2Vzbid0IHRyeSB0byByZXNvbHZlIHRoZW0gd2hlbiBpdCBmaW5kcyBpbXBvcnRzIGluIC50c1xuXHQgKiBmaWxlcylcblx0ICovXG5cdHB1YmxpYyByZWFkb25seSBzdXBlcmNsYXNzUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG5cdC8qKlxuXHQgKiBUaGUgc2V0IG9mIG1ldGhvZHMgZm91bmQgaW4gdGhlIGNsYXNzLlxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IG1ldGhvZHM6IFNldDxzdHJpbmc+O1xuXG5cdC8qKlxuXHQgKiBUaGUgc2V0IG9mIHByb3BlcnRpZXMgZm91bmQgdG8gYmUgdXNlZCBpbiB0aGUgY2xhc3MuIFRoZXNlIGFyZSBpbmZlcnJlZFxuXHQgKiBmcm9tIHVzYWdlcy4gRm9yIGV4YW1wbGU6IGNvbnNvbGUubG9nKHRoaXMuc29tZXRoaW5nKSB3b3VsZCB0ZWxsIHVzIHRoYXRcblx0ICogdGhlIGNsYXNzIGhhcyBhIHByb3BlcnR5IGBzb21ldGhpbmdgXG5cdCAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgcHJvcGVydGllczogU2V0PHN0cmluZz47XG5cblx0LyoqXG5cdCAqIEEgdW5pb24gb2YgdGhlIHtAbGluayAjbWV0aG9kc30gYW5kIHtAbGluayAjcHJvcGVydGllc30gc2V0c1xuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IG1lbWJlcnM6IFNldDxzdHJpbmc+O1xuXG5cdGNvbnN0cnVjdG9yKCBjZmc6IHtcblx0XHRuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdFx0cGF0aDogc3RyaW5nO1xuXHRcdHN1cGVyY2xhc3NOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsXG5cdFx0c3VwZXJjbGFzc1BhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcblx0XHRtZXRob2RzPzogU2V0PHN0cmluZz47XG5cdFx0cHJvcGVydGllcz86IFNldDxzdHJpbmc+O1xuXHR9ICkge1xuXHRcdHRoaXMubmFtZSA9IGNmZy5uYW1lO1xuXHRcdHRoaXMucGF0aCA9IGNmZy5wYXRoO1xuXHRcdHRoaXMuc3VwZXJjbGFzc05hbWUgPSBjZmcuc3VwZXJjbGFzc05hbWU7XG5cdFx0dGhpcy5zdXBlcmNsYXNzUGF0aCA9IGNmZy5zdXBlcmNsYXNzUGF0aDtcblx0XHR0aGlzLm1ldGhvZHMgPSBjZmcubWV0aG9kcyB8fCBuZXcgU2V0PHN0cmluZz4oKTtcblx0XHR0aGlzLnByb3BlcnRpZXMgPSBjZmcucHJvcGVydGllcyB8fCBuZXcgU2V0PHN0cmluZz4oKTtcblxuXHRcdHRoaXMubWVtYmVycyA9IHVuaW9uKCB0aGlzLm1ldGhvZHMsIHRoaXMucHJvcGVydGllcyApO1xuXHR9XG5cblx0LyoqXG5cdCAqIFN0cmluZyBpZGVudGlmaWVyIGZvciB0aGUgSnNDbGFzcyB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGl0cyBmaWxlIHBhdGhcblx0ICogYW5kIGNsYXNzIG5hbWUuIFVzZWQgdG8gc3RvcmUgSnNDbGFzcyBub2RlcyBvbiBhIGdyYXBobGliIEdyYXBoLlxuXHQgKi9cblx0cHVibGljIGdldCBpZCgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBgJHt0aGlzLnBhdGh9XyR7dGhpcy5uYW1lfWA7XG5cdH1cblxuXHQvKipcblx0ICogUmV0cmlldmVzIHRoZSBJRCBvZiB0aGUgc3VwZXJjbGFzcyBKc0NsYXNzIGluc3RhbmNlLCBpZiB0aGUgSnNDbGFzcyBoYXNcblx0ICogb25lLiBJZiBub3QsIHJldHVybnMgdW5kZWZpbmVkLlxuXHQgKlxuXHQgKiBBbHNvIHJldHVybnMgYHVuZGVmaW5lZGAgaWYgdGhlIGNsYXNzIGlzIGZvdW5kIHRvIGJlIGluIHRoZSBub2RlX21vZHVsZXNcblx0ICogZm9sZGVyLCBhcyB3ZSBkb24ndCB3YW50IHRvIGF0dGVtcHQgdG8gcGFyc2UgRVM1IG1vZHVsZXMuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IHN1cGVyY2xhc3NJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuXHRcdGlmKCB0aGlzLmlzU3VwZXJjbGFzc0luTm9kZU1vZHVsZXMoKSApIHtcblx0XHRcdC8vIElmIHRoZSBzdXBlcmNsYXNzIGlzIGluIHRoZSBub2RlX21vZHVsZXMgZm9sZGVyLCB3ZSdsbFxuXHRcdFx0Ly8gZXNzZW50aWFsbHkgdHJlYXQgdGhpcyBKc0NsYXNzIGFzIGlmIGl0IGRpZG4ndCBoYXZlIGEgc3VwZXJjbGFzcy5cblx0XHRcdC8vIFNlZSBgaXNTdXBlcmNsYXNzSW5Ob2RlTW9kdWxlcygpYCBqc2RvYyBmb3IgZGV0YWlscy5cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3VwZXJjbGFzc05hbWUgJiYgYCR7dGhpcy5zdXBlcmNsYXNzUGF0aH1fJHt0aGlzLnN1cGVyY2xhc3NOYW1lfWA7XG5cdFx0fVxuXHR9XG5cblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyBpZiB0aGUgSnNDbGFzcydzIHN1cGVyY2xhc3Mgd2FzIGZvdW5kIGluIHRoZSBub2RlX21vZHVsZXNcblx0ICogZGlyZWN0b3J5IChpLmUuIGl0IGV4dGVuZHMgZnJvbSBhbm90aGVyIHBhY2thZ2UpLlxuXHQgKlxuXHQgKiBJZiBzbywgd2UncmUgbm90IGdvaW5nIHRvIHRyeSB0byB1bmRlcnN0YW5kIGEgcG9zc2libHkgRVM1IG1vZHVsZSBmb3Jcblx0ICogaXRzIHByb3BlcnRpZXMsIHNvIHdlJ2xsIGp1c3Qgc3RvcCBwcm9jZXNzaW5nIGF0IHRoYXQgcG9pbnQuXG5cdCAqL1xuXHRwdWJsaWMgaXNTdXBlcmNsYXNzSW5Ob2RlTW9kdWxlcygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5zdXBlcmNsYXNzUGF0aCA9PT0gdW5kZWZpbmVkO1xuXHR9XG5cbn0iXX0=